// Code generated by "enumer -type=ResourceType -json -text"; DO NOT EDIT.

//
package model

import (
	"encoding/json"
	"fmt"
)

const _ResourceTypeName = "AppLinkBrowserExtensionNone"

var _ResourceTypeIndex = [...]uint8{0, 3, 7, 23, 27}

func (i ResourceType) String() string {
	if i < 0 || i >= ResourceType(len(_ResourceTypeIndex)-1) {
		return fmt.Sprintf("ResourceType(%d)", i)
	}
	return _ResourceTypeName[_ResourceTypeIndex[i]:_ResourceTypeIndex[i+1]]
}

var _ResourceTypeValues = []ResourceType{0, 1, 2, 3}

var _ResourceTypeNameToValueMap = map[string]ResourceType{
	_ResourceTypeName[0:3]:   0,
	_ResourceTypeName[3:7]:   1,
	_ResourceTypeName[7:23]:  2,
	_ResourceTypeName[23:27]: 3,
}

// ResourceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResourceTypeString(s string) (ResourceType, error) {
	if val, ok := _ResourceTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ResourceType values", s)
}

// ResourceTypeValues returns all values of the enum
func ResourceTypeValues() []ResourceType {
	return _ResourceTypeValues
}

// IsAResourceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResourceType) IsAResourceType() bool {
	for _, v := range _ResourceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ResourceType
func (i ResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResourceType
func (i *ResourceType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ResourceType should be a string, got %s", data)
	}

	var err error
	*i, err = ResourceTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ResourceType
func (i ResourceType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ResourceType
func (i *ResourceType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ResourceTypeString(string(text))
	return err
}
